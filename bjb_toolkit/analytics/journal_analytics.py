import plotly.graph_objects as go

from ..analytics.graph_object_helper import get_axis_parameters, set_fig_layout
from ..datetime import utc_to_local, hh_mm_printer

MILK, WATER, NUTRITION = '–º', '–≤', '–ø'
FOOD_TYPE_CHOICES = {
    MILK: '–ú–æ–ª–æ–∫–æ',
    WATER: '–í–æ–¥–∞',
    NUTRITION: '–ü–∏—â–∞',
}


def get_food_analytics(records, timezone: str, period_name='–ø–µ—Ä–∏–æ–¥') -> tuple:
    """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –≥—Ä–∞—Ñ–∏–∫ –∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ –∑–∞–ø–∏—Å—è–º –∂—É—Ä–Ω–∞–ª–∞ –ø–∏—Ç–∞–Ω–∏—è"""
    event_category = '–ü–∏—Ç–∞–Ω–∏–µ'
    days = {utc_to_local(r.dt, timezone).date(): 0 for r in records}
    milk_days = {utc_to_local(r.dt, timezone).date(): 0 for r in records}
    water_days = {utc_to_local(r.dt, timezone).date(): 0 for r in records}
    another_food_days = {utc_to_local(r.dt, timezone).date(): 0 for r in records}
    counter = dict(milk=[0, 0, 0], water=[0, 0, 0], another_food=[0, 0, 0])

    for r in records:
        day = utc_to_local(r.dt, timezone).date()
        category = r.category
        days[day] += r.quantity

        if category == MILK:
            milk_days[day] += r.quantity
            counter['milk'][0] += 1
            counter['milk'][1] += r.quantity
        elif category == WATER:
            water_days[day] += r.quantity
            counter['water'][0] += 1
            counter['water'][1] += r.quantity
        else:
            another_food_days[day] += r.quantity
            counter['another_food'][0] += 1
            counter['another_food'][1] += r.quantity

    for key in counter:
        if counter[key][0] != 0:
            counter[key][2] = round(counter[key][1] / counter[key][0])
        else:
            counter[key][2] = 0

    x0, y0 = list(days.keys()), list(days.values())
    x1, y1 = list(milk_days.keys()), list(milk_days.values())
    x2, y2 = list(water_days.keys()), list(water_days.values())
    x3, y3 = list(another_food_days.keys()), list(another_food_days.values())

    title = f'{event_category} [–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ {period_name}]'
    caption = f'üìä {title}\n\n'
    caption += f'<b>–í—Å–µ–≥–æ –∑–∞ –ø–µ—Ä–∏–æ–¥:</b> {len(records)} —Ä–∞–∑\n\n'
    caption += "<b>{} üçº\n</b>{} —Ä–∞–∑ \n–≤—Å–µ–≥–æ {} –º–ª \n–≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞ –¥–µ–Ω—å {} –º–ª\n\n".format(
        FOOD_TYPE_CHOICES[MILK],
        counter['milk'][0],
        counter['milk'][1],
        counter['milk'][2])
    caption += "<b>{} üö∞\n</b>{} —Ä–∞–∑ \n–≤—Å–µ–≥–æ {} –º–ª \n–≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞ –¥–µ–Ω—å {} –º–ª\n\n".format(
        FOOD_TYPE_CHOICES[WATER],
        counter['water'][0],
        counter['water'][1],
        counter['water'][2])
    caption += "<b>{} üçΩ\n</b>{} —Ä–∞–∑ \n–≤—Å–µ–≥–æ {} –º–ª \n–≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞ –¥–µ–Ω—å {} –º–ª\n\n".format(
        FOOD_TYPE_CHOICES[NUTRITION],
        counter['another_food'][0],
        counter['another_food'][1],
        counter['another_food'][2])

    fig = go.Figure()
    fig.add_trace(go.Bar(x=x1, y=y1, name=FOOD_TYPE_CHOICES[MILK], text=y1, textposition='auto'))
    fig.add_trace(go.Bar(x=x2, y=y2, name=FOOD_TYPE_CHOICES[WATER], text=y2, textposition='auto'))
    fig.add_trace(go.Bar(x=x3, y=y3, name=FOOD_TYPE_CHOICES[NUTRITION], text=y3,
                         textposition='auto'))
    fig.add_trace(go.Scatter(x=x0, y=y0, name='–í–°–ï–ì–û', mode='lines+markers'))

    xaxis = get_axis_parameters(count_days=len(days))
    yaxis = get_axis_parameters(title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, –≥—Ä–∞–º–º')
    set_fig_layout(fig, title_text=title, xaxis=xaxis, yaxis=yaxis)
    return fig, caption


def get_gymnastics_analytics(records, timezone: str, period_name='–ø–µ—Ä–∏–æ–¥') -> tuple:
    """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –≥—Ä–∞—Ñ–∏–∫ –∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ –∑–∞–ø–∏—Å—è–º –∂—É—Ä–Ω–∞–ª–∞ –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∏"""
    event_category = '–ì–∏–º–Ω–∞—Å—Ç–∏–∫–∞'
    days = {utc_to_local(r.dt, timezone).date(): 0 for r in records}
    for r in records:
        day = utc_to_local(r.dt, timezone).date()
        days[day] += r.duration

    x = list(days.keys())
    y = list(days.values())

    title = f'{event_category} [–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ {period_name}]'
    caption = f'üìä {title}\n\n'
    caption += f'<b>–í—Å–µ–≥–æ –∑–∞ –ø–µ—Ä–∏–æ–¥:</b> {len(records)} —Ä–∞–∑\n'
    caption += '<b>–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å:</b>'
    caption += f'{hh_mm_printer(round(sum(days.values()) / len(records)))}\n'

    fig = go.Figure()
    fig.add_trace(go.Bar(x=x, y=y))

    xaxis = get_axis_parameters(count_days=len(days))
    yaxis = get_axis_parameters(title='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –º–∏–Ω')
    set_fig_layout(fig, title_text=title, xaxis=xaxis, yaxis=yaxis)
    return fig, caption


def get_sleep_analytics(records, timezone: str, period_name='–ø–µ—Ä–∏–æ–¥') -> tuple:
    """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –≥—Ä–∞—Ñ–∏–∫ –∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ –∑–∞–ø–∏—Å—è–º –∂—É—Ä–Ω–∞–ª–∞ —Å–Ω–∞"""
    event_category = '–°–æ–Ω'
    days = {utc_to_local(r.dt, timezone).date(): 0 for r in records}
    for r in records:
        day = utc_to_local(r.dt, timezone).date()
        days[day] += r.duration

    x = list(days.keys())
    y = list(days.values())

    title = f'{event_category} [–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ {period_name}]'
    caption = f'üìä {title}\n\n'
    caption += f'<b>–í—Å–µ–≥–æ –∑–∞ –ø–µ—Ä–∏–æ–¥:</b> {len(records)} —Ä–∞–∑\n'
    caption += '<b>–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å:</b>'
    caption += f'{hh_mm_printer(round(sum(days.values()) / len(records)))}\n'

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –º–∏–Ω—É—Ç—ã –≤ —á–∞—Å—ã
    y = [round(minutes_count / 60, 1) for minutes_count in y]

    fig = go.Figure()
    fig.add_trace(go.Bar(x=x, y=y))

    xaxis = get_axis_parameters(count_days=len(days))
    yaxis = get_axis_parameters(title='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —á–∞—Å')
    set_fig_layout(fig, title_text=title, xaxis=xaxis, yaxis=yaxis)
    return fig, caption


def get_walk_analytics(records, timezone: str, period_name='–ø–µ—Ä–∏–æ–¥') -> tuple:
    """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –≥—Ä–∞—Ñ–∏–∫ –∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ –∑–∞–ø–∏—Å—è–º –∂—É—Ä–Ω–∞–ª–∞ –ø—Ä–æ–≥—É–ª–æ–∫"""
    event_category = '–ü—Ä–æ–≥—É–ª–∫–∏'
    days = {utc_to_local(r.dt, timezone).date(): 0 for r in records}
    for r in records:
        day = utc_to_local(r.dt, timezone).date()
        days[day] += r.duration

    x = list(days.keys())
    y = list(days.values())

    title = f'{event_category} [–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ {period_name}]'
    caption = f'üìä {title}\n\n'
    caption += f'<b>–í—Å–µ–≥–æ –∑–∞ –ø–µ—Ä–∏–æ–¥:</b> {len(records)} —Ä–∞–∑\n'
    caption += '<b>–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å:</b>'
    caption += f'{hh_mm_printer(round(sum(days.values()) / len(records)))}\n'

    fig = go.Figure()
    fig.add_trace(go.Bar(x=x, y=y))

    xaxis = get_axis_parameters(count_days=len(days))
    yaxis = get_axis_parameters(title='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –º–∏–Ω')
    set_fig_layout(fig, title_text=title, xaxis=xaxis, yaxis=yaxis)
    return fig, caption


def get_toilet_analytics(records, timezone: str, period_name='–ø–µ—Ä–∏–æ–¥') -> tuple:
    """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –≥—Ä–∞—Ñ–∏–∫ –∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ –∑–∞–ø–∏—Å—è–º –∂—É—Ä–Ω–∞–ª–∞ —Ç—É–∞–ª–µ—Ç–∞"""
    event_category = '–¢—É–∞–ª–µ—Ç'
    days = {utc_to_local(r.dt, timezone).date(): 0 for r in records}
    for r in records:
        day = utc_to_local(r.dt, timezone).date()
        toilet_quantity = r.category
        days[day] += toilet_quantity

    x = list(days.keys())
    y = list(days.values())

    title = f'{event_category} [–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ {period_name}]'
    caption = f'üìä {title}\n\n'
    caption += f'<b>–í—Å–µ–≥–æ –∑–∞ –ø–µ—Ä–∏–æ–¥:</b> {len(records)} —Ä–∞–∑\n'
    caption += f'<b>–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å:</b> {round(sum(days.values()) / len(records), 2)}\n'

    fig = go.Figure()
    fig.add_trace(go.Bar(x=x, y=y))

    xaxis = get_axis_parameters(count_days=len(days))
    yaxis = get_axis_parameters(title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, –±–∞–ª–ª—ã')
    set_fig_layout(fig, title_text=title, xaxis=xaxis, yaxis=yaxis)
    return fig, caption
